#include <bits/stdc++.h>
#define sz(x) x.size()
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define nl "\n";
#define dbg(i) cout << "HERE " << i << endl;
#define var(x, y, z) cout << x << " " << y << " " << z << endl;
#define ll long long int
#define pii pair<ll, ll>
#define pb push_back
#define ff first
#define ss second

using namespace std;

int LCSubStr(string X, string Y)
{
    int m = X.size();
    int n = Y.size();
    int LCSuff[m + 1][n + 1];
    int result = 0;

    for (int i = 0; i <= m; i++)
    {
        for (int j = 0; j <= n; j++)
        {
            if (i == 0 || j == 0)
                LCSuff[i][j] = 0;

            else if (X[i - 1] == Y[j - 1])
            {
                LCSuff[i][j] = LCSuff[i - 1][j - 1] + 1;
                result = max(result, LCSuff[i][j]);
            }
            else
                LCSuff[i][j] = 0;
        }
    }
    return result;
}
ll p[1000];

ll get_dsu(ll x)
{
    if (p[x] < 0)
        return x;
    p[x] = get_dsu(p[x]);
    return p[x];
}

void union_dsu(ll x, ll y)
{
    x = get_dsu(x);
    y = get_dsu(y);
    if (x == y)
        return;
    if (-p[x] < -p[y])
        swap(x, y);
    p[x] += p[y];
    p[y] = x;
}

int main()
{
    //optimization tool
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);

    ll t;
    cin >> t;
    while (t--)
    {
        ll n;
        cin >> n;
        for (ll i = 0; i <= 1000; i++)
        {
            p[i] = -1;
        }
        string s[n];
        for (ll i = 0; i < n; i++)
        {
            cin >> s[i];
        }
        vector<pair<ll, pii>> len;
        for (ll i = 0; i < n; i++)
        {
            for (ll j = i + 1; j < n; j++)
            {
                ll val = LCSubStr(s[i], s[j]);
                len.pb({val, {i, j}});
            }
        }
        sort(rall(len));
        ll res = 0;
        for (ll i = 0; i < len.size(); i++)
        {
            ll x = len[i].ss.ff;
            ll y = len[i].ss.ss;
            ll w = len[i].ff;
            if (get_dsu(x) == get_dsu(y))
                continue;
            else
            {
                res += w;
                union_dsu(x, y);
            }
        }
        cout << res << nl;
    }

    return 0;
}
